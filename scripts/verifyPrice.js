const hre = require("hardhat");

const PP_ADDRESS = "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707";

async function main() {
    const [deployer] = await hre.ethers.getSigners();
    console.log("Testing price extraction with account:", deployer.address);

    const privacyPool = await hre.ethers.getContractAt("PrivacyPool", PP_ADDRESS);

    // Mock proof data - replace with real proof
    const mockProof = "0x0000000000000000000000000000000000000000000000042ab5d6d1986846cf00000000000000000000000000000000000000000000000b75c020998797da780000000000000000000000000000000000000000000000005a107acb64952eca000000000000000000000000000000000000000000000000000031e97a575e9d00000000000000000000000000000000000000000000000b5666547acf8bd5a400000000000000000000000000000000000000000000000c410db10a01750aeb00000000000000000000000000000000000000000000000d722669117f9758a4000000000000000000000000000000000000000000000000000178cbf4206471000000000000000000000000000000000000000000000000e91b8a11e7842c38000000000000000000000000000000000000000000000007fd51009034b3357f000000000000000000000000000000000000000000000009889939f81e9c74020000000000000000000000000000000000000000000000000000f94656a2ca48000000000000000000000000000000000000000000000006fb128b46c1ddb67f0000000000000000000000000000000000000000000000093fe27776f50224bd000000000000000000000000000000000000000000000004a0c80c0da527a0810000000000000000000000000000000000000000000000000001b52c2020d74600000000000000000000000000000060b0dc175eb26c7fb66d565082dc80938f00000000000000000000000000000000001ffe1f3aee3b4ae58a21b9d695b82f000000000000000000000000000000bdf9e453730898b071a133c01990920ae3000000000000000000000000000000000004a6d7d0b277e9ff3f02a5c6b31efe000000000000000000000000000000bfa5798b0ce8aced0e8fb11e5622e1abc300000000000000000000000000000000000df1ad0f7b716509f71a7436ed60f3000000000000000000000000000000fe0a813a19bbfcb0d1a0e8cab450307ff000000000000000000000000000000000002638f7a3397ac027839350199a29050000000000000000000000000000002a681b7cf32852061ff806e276cf126bbe00000000000000000000000000000000001a16593cf6654a87c0562538167d9a000000000000000000000000000000bfdc955e677d909151975b5d5b2dc2ea6500000000000000000000000000000000002b1b99c4cf19ebb2de9457923e97c20000000000000000000000000000008f183d5ef3746ae887c7333ea2133b2f2e00000000000000000000000000000000000e87f77aa0bb23e55f4e19e84105a6000000000000000000000000000000ae2a327b7963e498a51cedeebc66b898e100000000000000000000000000000000002b0f5fbdc63187aa896a31720012780000000000000000000000000000002963eae484d729339f3a0b4e9a5da2d53300000000000000000000000000000000001459809a097e60a589bb9b65a1ec340000000000000000000000000000006af5f7fc1af99768d6c4438a87d099a43b00000000000000000000000000000000002fb8273aed44db088f96e867fafc46000000000000000000000000000000f02ad04ec8d7196e7dcb977a690efd737400000000000000000000000000000000002af4780d6063c7f1d274a6c838f7910000000000000000000000000000007e11dbabd71c902a0825f0a45633a59fcc000000000000000000000000000000000004b72a96ff90e4109242f9538f4a7e00000000000000000000000000000039492c2b80b77a554ee6d1170d70606225000000000000000000000000000000000020579836f3dc4104ef6cb96a57430f0000000000000000000000000000004b54f0ceee0fd9e53ff6e2a4eab4f85b3300000000000000000000000000000000000841645ce434672bb2c9c83172abcb000000000000000000000000000000a876e63343040f9835bf69b054745c5791000000000000000000000000000000000001c1405a601fb3e2e85272f5a41bc20000000000000000000000000000003e556af14aeed6f76972071e3ad292c7fb00000000000000000000000000000000001b3ec03ea073d91861fde91382495d167f08fc2aa7b3ec789de1d2fbfc2feded8dae01931dcb2350aff9f37cb7df0819e54576b689ec3d3fb263e38585286f3aa63a46e69ba56df331fba0734820f91d0a8d260021bb8c246f372005769154b592d562e5aedbaabbaa4ba9788f7634036d4faa73a49dbc3bce7757b6543d3ded291e9d00c7d11a87f2f3076189b8670a0ef6fbf321a10d285354a996f5f94190b70c7838dc86696db1efdde4e5f7c0214ac30a3d28a8e3913e5cafb6af4dee5fa72143970ba54eb9f5086aff1045441c3262d1ee9c48ee92bfc1ebaeddd8f22edd155eae66652c6c4528c9f14cfd552c3b31381cfa27bedd751dfdf2d9f4597dae2e615dfdb0d01993e64628b765420fc614d4d3ca4ff3d9fcacfa893acea21b94f8cf08a40e2e9f43af8d20ccae4726242aa3a7dbb627c5d45978234302b524844bf3205b4fb36a295a2c3d9c209008629c672611f1946c7ebcf70faa25663b116aad4633fb3e0894b792d846d2c52ad38d22541eb9c83e997c4225d36e398a7e2f786a633cccdf1ec57ee539e958280c9adb82dc34be00f936fcd9ca272ccf847935e56cae159dd866bd5134d8700c4d1776e421cb0d4ef09ede2e9afcf6e5f3b15246f2ac396945b323470d4aff17822877cf4678b38c971d688f8e5d6eee6dc00992721a33983b2d0c0ca7979717425ef96cbf9357b947ce8549f119dc61adeba7506eb2356911a912aa9036390d96df50b3c034e0a509a6f49b2c7752dd6ec12ec741af68b732a6fe55b8e6fd29872912cdca7d5dc01e1e73dd005d586371e29bae5a72688fc2008a1427503c025177a389949939409171edad777a681d2e4b01729c33dfcd08e818a0ff7fe316d08fa59f6a8be07789ff0983cbbb7da10b93946b3b0ceb2ee56c1c5d789c9e14403153e4b336debf19cb9f7fb74c9e1659f424af0d4cbcdff2ef1aa0db492028e91b0f1045a607a6088a42dddb5544672ccf01473bcaf3801577f01836f9f92df40898da26833df9fedd85c99d06827272e5803a7248e21143068b2216784f1223eeebbb870dd9d642a4bb1b62007fe4d6915a6679fc56ce4232682fb64b18162091bf79e518c8eb9bd20ecb0fc458084fb7e5f0da4bc1594294d01973d4591eb842c46c09a67a5326d5cae19fc6feb6c07138b641d537c769ceb0e46555e9169755aca3536a708dca652f88b9f814c9547de8fcf07ab90ecdb81f49ccb8dc0ec2fdcdcc7898916da0f1444c3be5a0fff90e8d0e6369d6c30446c46ad6cacb144ccdf2580201b80c760437b33721507832c3df55e4438f54cfbfda67ab5df4275b780ef98ef9809f114bbc9f32fc9d9ed978e7303e08e6ce4b1ba2cf17e4b00aad26caa627f2cf4737cb8b5e7e5f9372cad0fdf55558671b9f17ca0f1fef1e0812972307afa23c4bdf811418af78ba82c42a8e97459c1f99b9a22f92e1c85c0d471537ed2881cdcbf7e907f8654e427f755e3d3d8d4e90c3f6aa215c4f1fdb220df5225f159c63f9c8a6ecd4cc31e8e0eef8a5f33d63cb92d19a5bdcad581f026ece08fd96c1b54e597989a5900567ea81be6ca11417a2b8fd1db59c94308c2768421314f7bf576d7902478aa43d3856bc6a10b73bf86f99614e9b227c6b3d20985c0c39f1dce739e39bb14ca4936b8506e29a3269b1356b43e0c4b6d21a7c075e78cc3c9fc8bd8f771a4caab5b3f35554c395c094de99fa1d6206e480a6f413671c21265bf9906d492cdf5984e5b6fdba5146817fc612d19b54324f9783fa0ca910a11a17f731d9d2a2efb8dbc2024a93809117bbb5edaae4c741d5660c9316df8a090b4659ac3f0504c47c7d1f2ed1a7745504f3bc4479a058e94ca76b330a263ded3fd7ec7548dfc77cd82d1579d86ae8a229a27e79bd25ecc562886dd90cc9657808d5dd0de8e3a9fd956d7abc8a732b072a7cd99a2eeef830b6dc741b104dd6095582a25fbc40b5a45f0bbbb31d1d9e42242a184977f9c44ea7ed1cf60831dc748267f20581726cbd806d70d0c67dc6b3fab37572bb5325bf7db565360c9dae3f84a629e85e36b526941ba8abbdc2638797871a19461e0b3acd834f160dced6b4253b642adc65d78ff9bf128b5eee9445743e22e0f94664b00d15ce420e473bbf783023312ea0000095dadaea4a69b47268015a75fdd6d8c8c96382c206462ab3b30192144966a9bb3c6fb0d2cacc415a095e70293f56c52368ef7a6b235f66a79b369449ae7f459cbce3adc2ac2d0421aeb60ceb3cc7d2d1b0ef5b522493df687a0c48f6e06eb234b69d89117fe193f5087e77d0019dfd8e26a403ac2c0b3501632e35e09bb99396297d31d58eaad41a6769a24820ee3e7dad039fcd10cac2e0a684b9661b7d5d58682e65a5d0ca446b5a20c7eec2bf31250f1a302322cbeec664b58275bb7a1db70ab01c56c8007a580679e791a6052a7b67f9b9681c34d5d8b96b21140014731cde3767fdb20835d15c6c3598af4b2e1bd75f5364162e7180613f026a9143a4837daf10290e2f89fde7b8d551d5f1bcac897d69d027697d99fcbb336e893b77ad8087a2ad686037dfce8672a2d956b59c3dc0184f0539bf33b1ff50cc9e7a328c03ca1b2efcfbc0abc87dd079a0484fec16ef975007d1519727038138f822e2d5a3a007e174a60717ea7ca049ddf3fb2ec5d623f3216583235d0c64f65a4fa6ff93999711e1a1f34bfdd9222f0b4d3bba2cc11d7c00211999822b0ea64ea0bdedd9098ac8adf8142fdf038929cb166aed3675c173156c03ae41159aa7747bcd94afcc12adc2454a7fed0494aca29a9af19360045e1d32f6235097a4e02c3cb27927630e462ee07c161a64c35f1913ba5f08dd735624186e808b029eaa8d33308e5675c29f50f497cb533d80e738feb2171616678e0c7e1de14933f5159ed8bf0e352909ac719b606bc7f26f9a8193524855a91a7b2ba61cb626dea56ced7e39be6fe2498bee0c6bd8f8a300ac635dec2c9bdc2e092beb1d58f7ec7713569549cc55ac6a8ce302a72c8eff2d35797d053caf4afa8e087406a8c4d4d4bcbfa853f8b65beaee3470527fb87a5a9273df5538a567b9b90fcfb78d263920180850585afd9dae20e0523dd7bd514fb1c6949a6b0a8424c403f3926e8af9a83455815e324c99d3880342e5c76a1ef08d0396891873e465c123b62c7cbc280817b4362c354b2182aa6143a227a8147fae21c6b622fa6cbaea1d8bd5869ac3541394736b4246ebe0433c192130c1a873c413d7546fb6f983ef05bc09f7d4530eae98c7e1f6cb2a8f53d97e962f07309d3861e592eb357516c216bc738d76aaf2138a382e890daf5ecaa8088fb969d30fd930a0bae62ddd3e3004cfbd2a5f7369c9e5f1e0496ed8327d3024136b3e83086c021e70f8cc2b62be201e1a6b00d4aa049e2db2087da85d6fb302ea2e5f890a06b0e3de611a00daec02423629196b5f182caa631a80512e07f64e9d0fc494719d23388729e5d5356714ab4ac50bc9ce60673f19fa0d3771687b0f4cbda92fbccf2c19f16b8122471a18e7cb328a49cf0c6bdc06dece50d75b3dda2ca1b6f59578879b3cac8281606b2944e9c5a0c1f1c3fbfd179c5877fd4c162b747fc74c0275fc09c8ace1526ddf25f2088bfb4299a3e5502e063bdf86b3735d4e2b9a605ffdfc34e87a113fad1e119c81541eaa4cb09832f5129ba0021d80d0341d75a4becbf9360e1f068c863b1d7cd27cb58601f6ed5d521a71643418d9fc3bf06b29a284e67ca053d6a0984702d0b2641f391a1531a9f833e2b9a9cac205889139d732996c9580821d092435291c1e62087cfcf6f9c85f3437446529f975ebd08f2041a1271088f8330a73c621fc2a105f69b13dc14eeb9aac419969da9de25bb516d4b6ab2b5bbb5e769a620c5700b4108574f6d4d1c2805e10bc3267594f9121331f59c0119870d3f7f71b27868aba428b1e4c9029fa0feb209b1b75905a05d9679bfc23c69eb16abb09121e899232ec1b5679bc7adcc7cf938f6465c9c6f9888d8c24b9843d48c1d3b5ec2d2bc48520824073f661135fd9452b27fe918ec3f472bb269025a6837a0f3abb220e14917d9df2329ee7083f426e2c37faa83adacdd4fe724475feee4b6b3eb82524ceefb4a2f5ef36f0b73ab14111e617998a86bb22877a22688a925a47e1ef2f2f5457377c565c51f309c455e1f8718894ee7adf86319f11253c9bcd7b5cc8196fbfbc021d1f662e696e800ad6c244c5529b6a4ad6aac9ca2d377267d6258814f07cce03ac2ed779389b8fe495ad6b8ddc8852267e0282859905f26c13d5e9091a8f3ccc9d55d54e26cf8358f8433fef0e77246c2c7d9427c7f07258c38cd4219eabe45feff5570967b4730ed6b9a33e4179558eff3e68eda9bf7b76f3aa860a278aba597fb0e825e92b6430c854624b818f4fd4e2d336f80b9a0342b6d3f61d95034800f3c5df2ce2dd524427ce4fd0a996aa89f64ca4f1fbf3669bc31a08130ccd907a6702c3704cf32b0b0a74de2ffc2be3936a745dc40e095dad76eeb41f4da1dda42593b276472df229a2055a55e7046692e11db297fc8ba9e87d359b2352e8bc41d5deea876ea8edbd078fbeb7ac9fae1e7742ad39621d230be175b514b4be8ded0e59196acad4ce817e70821f83f085292fdcda36432de799803c00193d8d6cd6042f7999afcf560f623b153d5a210e07f8d1fae2e967e8552f3f9e1a8bba011c921721568941d128f668796d0cdff621a48ac4f1df0a3dea4e19101d914ae972182448fd4438b196e37bd5aa27c326d96dc313ac098c789c7cf1eb0067ddf74ac0bbfb49463a297ec4b91e457716ee6fb26a1f5442121ccdc0aa4d2b4ba16b1c06240c96542b51a02e987ee3cc6bd29307e94f9c7358e9e4ab04332c17e011bb43da658237e3eb9db1186e66d31e8189fce244250bbfad0f74288c1759dc22d7f772c156008436574fe4078ba57c2282d9f60b2d5ea7a96987fd5217f778c6f91c7512ed561e562a962f36193bcf9a651b01785575ddf76e41b274033663ad5f768699b154a3ce65355db213dec31a6a9734d47e5873d2b6008baf24931f0962b0272ef62dde8b541c587c71cd8e69bec4409f2aa6547cbac9b8cb08c20cc102e2a4d2c51f03c5daba235dbfd8119b422dc1fa01b8096b9806b472188bc43b225d15829b905ba10d99d6f43c7361db0e9ab1d0627a6f6d7705be34098e163c32ec37f266276bd0927e4aedbc5f429419f407d505d92b55c7ca8f4b17ae111b9104478120d8405b5f0faa3ac3ae393024e75dd307b36044c1b6a42b0b97875b7330e1aaba40ea6261c06b658ed05aa8dde259fbe77aa54485084969085bc311d749f2a686fc5335ef9e4691b386146f9d439642cbaa6cd489be3cfa150347120aafb2afea980aba79bb12fd26346a5758bae0695855804ce6beee9c2c0e6e9259b4be4ad1b3815caa9afb26a1a2b3a15ba54e25f9d6b6e6189b61a31448d8c20cb2de9bdd770d1c8386ad58543890921a773a5febc3e4c02bbccd0a222d446971a4e6d183550fa9f8a4b8979c48cf6be2fdbcfcac9f2b80e2109b2122625a1446831dbea980a4ecd0c327401414fb08decc550e457665ca20a4b0680ed01f76bc149486850f6956ce95d3e35738a1624860894c519d47a535dd07d62b58843f5c232b5b05665219e7dd56035ecee3980ab1abe581fcbbcc12434b612834024c35785f977fc3260b686fe5d68f7d03a281bf31fbead40a65789e333d189fed3f5d72e7335525a7febb67b2d2cadafc60591444b1bf48b9e6b925c35b15ac66c6cb2731aa4fe73e333a54ca13bb365af1b0107ef2389767971e3c80552720af0af6148c182e4d136474f5408bcab38d5228be0d0c8d708e7452e787f31c8bcb6779a2b5ec88687ba58068b310224c3f57abe7798e17c5ed92291a87d62151d77d9c89f09bee7f7491f9f2f36beb2a51589521eb0a2d3a01e03ad263c90f7f1ad501652b8b4cd811ba5e9da4bab1637a1c891bc1c05930572c1567df4b2f3987b67d5ed373eba86b8240777f0e28ab9f32f190d27f68af5d580d1694d10a3c2dcdff3ea69e2d4818617d305f66b524d149c8b88f5cfdab836195197d622f9827218047438236fcde0f636d9737ef34806120d414dd5ab66f7c923c083d1f174297e513fc4edc8f52d3f6f258482d7f52d79830a753e7b7ff04ac76904204701245c84847f62c0c2296a3176abb082355a19bc06604edae2dde2952e8c40af670949f072f80215e838660046a2d0314e947725cbec310ac5507e0a112611e1ffc6e189217d0ea316e7deafe79cc814fd05deb922e2669bdda09cb7361261a9244116651f831ae117efd2d189faebf32ab687ca1101b495edba76ef0043d2a9f116262c27b799a173c1bd702965b42f7911416fd6070c800b265e04947f420c0626823271bb60f922db7881535e884e0d88e3bc2276a43b4fcc5566cff4800e5f260ccf07820af704277b2000ecebd14f06b7142a410a22a796ffca1a19f275f7931154a759b72bc123140f3183593f2b7ae33621fabfec8b920aa1ea9a204849b996ea43ad0d49c1dc22298bfc70b084f32f52519aa7dbf16c01b87bed81b1b2f6c664c0870d8284b18a5172ad5ee5611d3acdf3fac31b0a41b6bc686680d7a11ff059a05b5292ed03ca3c9f496da58f328590e66633255a2ea2b8b18df01b529813b89f755f9e7d5b7e4d6c936c539f021b40582b096925832df81fb691ee455346775af430050dc0d7efe3807fbf676f6845871e59547f66ec0e4729e1c928db260f6d22b938abe5c5d2adbf79df2536de685dea99a5d7728c6f08c65039106c0b5f760c7ee25dd8557967b54a208d82ce3027f5b9343fe863e68ed1b01ae7293d38f1c035d16336313795d25b83ed258f76d361f9b8e9907edc86ef41b36c43f3a6048a1f86514f6f145f8ec101c7862bca4be9cf450c66f8e141b71218f108041d4efa802e20f90633898a9384d16cf271c3866fb7bc36c5a55fe1704dbb78459e66da61d8928696f2c446e8364d7792c222c5f12d876666eb8fce82091dd4794c04683a43ad3bdfd5409347150668be629f070215e310914e9e6ae23a802a018f8f97c440937ea705ea4cd9f278c6c71237a8756f5c5e7de4a662f070c9d3319f04d8569cb6ded0b3399b323be32718cc5c461b0789ea459976a1016950c2f4ec8847b87f803f28fa2b04be980929c8792d173a961383cb212bc3f20d7e3877b39fe89c5189a256d0ddc136812c6f06d979dda223c83c087b5b34c13e6e82fdf553d0cba22436839e02de5bc962197e844248c39929ff91dd0e3592b9d1750428d802a550b598513db8adbe5153d363faa59085f3a0ba20a8e6cef0aca52162f5a037a05a1e791a1875a59bfad8856a9db305f66567a063e209c570af31b1d0575f0952e05e79f58dc00be13f8e42e813fdc1c282be400025a9bed12ae41f2a676855c8b7e2acb4cefea6a63aae5ae28abd4601778715097ca88621e951053d14a2a4d27ec464c8c13520dd8d6650343c0e1755ad83730504d3ac82afe468e29f20cceba444a1f2d2b110bc141deeda08fdc4f97588c05032a0f7c0fac13f8c8eab48ba576ea026e643e1e53b7463f25628a5723cb6aad2576188a09c1d2d8817a03346a95599b64d7d6a958d69ac94329c0bd5055c2a130cb05da151cd26b98c520010a034ae8c3c4f804e224783e357e878cc7cd2565f008ea591d7ccbe051d8561f337323115ad89b0bbad2924cd672e6b2fcb5cbc90753448722a6e6ebebd12d1e53123918f2cef7d5dfb8ec8b0d5ea5d22e1a38b218e5840714056d3830bdcd310aaca451c1a17552ece1ff2628db0db3af5be47cc60a08cb0a15b8f60939f0a0fc7b5a25caef8880c1c540f844651ee38e255ed27d922d5912da61d668bf31fa5434c6225d7dce854d3da9bea0d282545375eb41a7a59f4fe728e514727df61a432cf8b17646c25428e819b56dd2114374c9ab40dd5e805b37ea15d891e87a73e37f4224f4993198f82a8097e4755f313d129e63fd50b0016b2f47f1e39eec8b86fdc976d51ea513e4bf821ab7cc89fa97d2de2e3eb93260e72adc6c40bc09209027a9aebe74a298b4c9d848a546c59b8d43c1a403cd80957334381e47442f84e4e01be6a2a792ef04cc396c95b5ba133ca29368401612dfa46f424d0cc45babdcee20e5dbd4854b84157d38903f3d2f4f8472dcfa3ec012d8b0ec1c4ee991493d06482db3346ea3178f40318b78210dbd06dee68d9fa04e0afbe5e162febdda48e4f133a1d9e6aec485adeba6fe1f328f8bf69f2a25802379b05833929e3eaba0d543e70fcfed42a219000cd5110c3a98e0d9179b378007bce52ff5222b2910a88d654d5ecfc09cb4b1ff8d87417a8820edce0c3a05328ae844e56ec30b46faf5d38070d6d34630f6994be39fc3fc0a8c0618ee404e5074994ee24f4b72b52c1b934f3389c5603dd845bd16071eb1a35a9c72428394328ac95cb1ef5283be4c31ad037b08aea67ef95f0d6cfc028d329731c817316321dcf257a2e1a8858d78ac8150cd95efb09e3bd7607eb79184aae5d2ceb3115cc19eefaf768fe14fd66f28678b6e810738fc18bdf86b77ac9d535aa65702e7c3d2a4f11390264307cc6cb068db87932cf63f33b350093e4b25710f2c0a5864f782fb6dbcf41f4f94836d9dc41570af3f79546ff4a7496837fb784786e940c785c2d7b9383ae1486173d29bc14f0b12f84bc3aac11d6461d47ce2298897c82d8d2230a08d6c7097e8d1c085bf4276fe7a370b677ab717ce0826d2bdb6333b4ebcc28881e9291a60730ef43de6705ef7a791d340bfb5c745048d5e23f99aa8893ff02c61f07c7d9ebd139fc5bca679bba6aaf4788acc82d21554e004487f9e1e7f019978413ebb6d699f2b442f21d47afa893c13fe5a994eb7acf885d1955893bfe2154075a807c8d6e2fd1ae34e3d72943a6eefbcfbd56537be889cf38707c2aaa2238236327f3335a2a4b42db724b67f37519f9965a4ab4c01365e7a68acc843f23cb551d05ef4b1404df4a0e960af0f9759569c7de34ee76ff2bf8c46c8fc2f902ec917e0c0f042b89a1d60da15721870e5610981d346a0a4dc4b8022f12b62116da5f7f23199c89ddcca95e72200b007d553fffac9e8a5a1d621318906253a504aa718b6f9d7377de96fdce63605f132a06f64d5a1f37d58999ef4be0aeaa562b3d7b133a41a4c58eaa89e683da24955c1883beccf7b203def24a8468c65fa30c71f0cd87c871d31903417d564dfb0af66dda42091abe679286c2890e39f823229bf3d30c1a7a9b59f50d4742ee7c147833b5345c9468d8d856ff7b9b8ca9bb12a69597d120bb5a89512c98ecd3bf3bab0b4b3937b3bb2fa58947b5c2b7d6aa186c572a09e9cfb0d60b60397a375ef2c67285597c726e320474b8f11920726e2edad74a371499884a9518fe4969d5daad8ab0a2804e73c05a4c2109b996a76704eaa5ca1b5b0d1dc0562251e0272f118685bc178d391504d68c6c62ac47fc16037effc78e7de15f45e931ac9f5ce2fdd918065800991e0501c39583ee24557a05a1bd0dc0748b1c0cccd38fdd277e8881d86ca2da6d20a56d6fa01a27f31e0e0599fb37546453410ce851273509846a81d0157b64194b837144aeb7d205306926fba3369fbc31f142b6f140b5506138291e3320c06c325f84a24a353b39e3c921f5c173ba8af4e7d69b8fba6f15bdae3a794ba855548f538aab30beee81f2d200000000000000000000000000000000f63fad556c518cf8e30eebaf3774077900000000000000000000000000000000002b0897c8fb837b9282ed48f72be11100000000000000000000000000000036c784a44074cffc790e6e975f4c4255d2000000000000000000000000000000000009594633bca037c8f78ce520c4ab890000000000000000000000000000006dba6023904c147d0690d13fce63a2bb7b00000000000000000000000000000000002235d4815ce3fc49b2a3fb9a82d9bd00000000000000000000000000000056d8a68b40ab8577b15e15b5601595e02400000000000000000000000000000000001e8e920add22eac7bcfa590d721f9f0000000000000000000000000000009da6891674f49e6849b105b4b84d90c658000000000000000000000000000000000022a77cd0675370f55327d572bddf2f000000000000000000000000000000fb44a7839e3b9b07bcc02cf353d85b798400000000000000000000000000000000000ee5556adac9fb80040f3b5e4e60f3000000000000000000000000000000e97580323eadf05a0f14037dcfdb5370c500000000000000000000000000000000001d9e86b215b7c54cbc906b91c8e218000000000000000000000000000000fe3f430375c016f576297648612375336c0000000000000000000000000000000000100891260681a9a9edc51052baa2c8000000000000000000000000000000a29c3397d64ef79e34fa16ecc743e08dd50000000000000000000000000000000000286a58879cabe6e48a322acbadde5a00000000000000000000000000000093947e2b17fa73c7f3e970ab43473f424100000000000000000000000000000000001e19e1d909eb4530ca3b6c126a7ea6000000000000000000000000000000f0d77a44dba927854ae677b215a9f4451f000000000000000000000000000000000017ff80e37b8d057588026082d634ee0000000000000000000000000000002006fe3beb376e8faa217ca0918b0df281000000000000000000000000000000000026f0f3735023b5612b4362e9a978a0000000000000000000000000000000b851aa6ba63b3509bfcefbb14a42f818770000000000000000000000000000000000277591f30901fd538ab130e690cea6000000000000000000000000000000f4c300c0e3995690b8dcd3525286b9747d0000000000000000000000000000000000210a1d5df4db3d09ac0f649788c826000000000000000000000000000000df106d976af3b5d652b1ff46323496a445000000000000000000000000000000000026b359dc70af19abeca07e61cf1dbd0000000000000000000000000000008c5d3c2fb415936616a08f7a47116cbbe0000000000000000000000000000000000021183d5b39b1167fcc73a45931757a000000000000000000000000000000879bd354b8c7cb5f365ac5246d98d52384000000000000000000000000000000000027fbf688c3fd07a0f9719b51cc23f70000000000000000000000000000009df6292e19e43b358e70044f88c96ab3a800000000000000000000000000000000001dfad2fd778cac4bc20e06b115cf6e0000000000000000000000000000001a8f1dbacbc911f934258dea9456e0646400000000000000000000000000000000001536835e0069afbfc952f576d334b5000000000000000000000000000000189aff02efa972e02d67d138ed96d6a56900000000000000000000000000000000002cd7f034f376e6a9721d1c3d5acd6300000000000000000000000000000059588eb1fca8dd0aa174912eca645ab3f200000000000000000000000000000000000614b6f32e39d30ffeb0430a5ead480000000000000000000000000000008dfd34ed77d3a0549bb3535bb88422f3ee00000000000000000000000000000000001662ee39345acac43b364966197e250000000000000000000000000000005f922d4bc0f6d2454efb577cca3279ccff0000000000000000000000000000000000230d5309ab41afdca903cea656f54500000000000000000000000000000006894659d88abd4b33d46a530e279352ba00000000000000000000000000000000002727dd28557cdd302145242bd8564d00000000000000000000000000000085de6d0c849f917ecfcfdc71ac77b53f3b00000000000000000000000000000000000a3b97ea587019b50279affa19c9eb000000000000000000000000000000db489cdb50f5d5dd9cf06959f3fdb8325300000000000000000000000000000000002ba2721df85ef2232a5f27113cca7600000000000000000000000000000026bf1587a61be41f37f05139f4a09b108800000000000000000000000000000000002415783273fa26aa65ab23519204dd00000000000000000000000000000064af2b24786168cfb1588ce554434275cf00000000000000000000000000000000001ee7f868accefd6334aef04eb6521b000000000000000000000000000000dc15885ac812410207a150a928f69d58ba00000000000000000000000000000000002ca7278ba49d05099f4d58bc57c833000000000000000000000000000000d9c03589e827d177f4b9745cf0acbebfaf00000000000000000000000000000000002e180cb32926cd80b4d46ace471ce0000000000000000000000000000000c3d8e96208a0ad7ded083b0169dbfad37000000000000000000000000000000000002527004ee2942b136b19ca814a761c00000000000000000000000000000014bfa5e90f42a519cf71126fa96e40bb2b0000000000000000000000000000000000305902f109cf7ddfa8e7907f11600d00000000000000000000000000000020ac6705b4fbd4a3a079c5cc66fb34a6b800000000000000000000000000000000000c1b0a157c2c45f5a509269bf850a6000000000000000000000000000000b674396be18b5ebf338f48682d7b806165000000000000000000000000000000000027028ceba48f2c0a2bf93b7a0421920000000000000000000000000000003d3b9e7dca825c848597eb2b71c42d1d7000000000000000000000000000000000000146f521f4ff4ddd10d39a30e7d5050000000000000000000000000000008edbf5a8e33fbeb9f1a3c0424e69c7aca2000000000000000000000000000000000016263d997ea662d89e79e41ee6c0f00000000000000000000000000000003109a2d26de706edad1a2873b9eec839c400000000000000000000000000000000002141b8c8a3ee7a9caf1d052f891b440000000000000000000000000000005271ebbf9d5be43f8f645023a0f3a30c05000000000000000000000000000000000025d5dcf261e0a702a309f7b906bc77000000000000000000000000000000e6faf60269323c1495861d05c343a505d100000000000000000000000000000000002309f23fe4a94de3a76f401762c4e10000000000000000000000000000007d34684e216309df1dbf8865dbf2736c69000000000000000000000000000000000010e78d2948830f629d5113225ddf92000000000000000000000000000000c7930e1bfea4f867be23c9861d88e8cbdb00000000000000000000000000000000002306940278eabd601b3944be92f30100000000000000000000000000000048dc884410a32e28ef41f45213c5139449000000000000000000000000000000000014077f4f60894741c98341c2aeecfba9d8349c5859e440325ea87a64eb4145a81e573e1f548b007fb6a58aaf1a3002a2b91a3ce7d8f5e7c9fcef437e8a331b0819520ad50b57efbf047bee90a6e0d50fca82b713b30aaa14fc8134bd441beb4e98398fdad2001b2f65649af57ba1436f8a0af580b1c285d3a90eca283d9a7a967a9827bec3ad18958612ab8742f10969c3abc0fe76aaf86764dc731126b1a465e4c6651ddb849cb8dedb9ce9b6917a7fa4e84a5c5fa637ad2ea019bbbbaf32cf414a47e4a613079601055ee1efb24211a534e4a053384f6a59db76fc872b72bcf975dcb85434cef29ada640d0992d06ed59d2e21ed2b503071a4c4776b8fc67a56fa7daedd3e0804461d260f05423bf69bdfa512d67fda6882d4b2a0f7390b55e43a6d76e7f0aad5e47052108d60e845b01723a7dd9231d380c911b6faecfed5966fc2d8658f6eb91d0090864512e01dcf9ef99cb8924dd36894224b57a25c65ae18a68328319ea3bd0fb6b7399186d4425ca92a347b53688e7c14a7a42e19ff095cbad0df769230ff15129e97f2ae3a9f33e62e749f07a10f5cff7763979e73442454de102e73dcf3f669282660beee0bd2fa97fd64016ac5f03f3155b8298f7ad932a8f9f358f3c252cddbb090547bcb22006456538e38f6c2bb78d15039b93a7f8f9ea3997e65f4910d8566f0d5977436eaf5135374a6251c714c9101349066ad860cba08118d17edd51023e0e3dd8b4e37092d015e97b9b37a1f72c2f91e630c99ff5b5443fcfdd85b41c7b0ecaa70eafbdc5422d98861e6a88b7027db0cd0f90c7ba60c01202ae50f5181b1cfd02ece4f3b2a87e80ed576119d7f4f3b09eac616b9526e923f6bbe95bc48d2e646110630bac876ebf83adccc4f78f78aedd713f564d3b28f0a0fd87535f5c230cfbca7157a87c20732bbd30e6524c7b0bad62c0e122314c5f0a2f68fb5bdd10b72aa73eae04af4da8bc3f3731f0192988a206d5f64b5c59a786fff1a778740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c0e69b5da836ef018c9e4aae0b99b0b65000000000000000000000000000000000006eff72230e5526159438a145a94ab00000000000000000000000000000084cade17d567ccf19f3001bd21279d33ef00000000000000000000000000000000000e693e5057436d1a66612a344a26f3000000000000000000000000000000b024cf8b8ab630ffbd187acccc91f8c3ac0000000000000000000000000000000000068ac3dc10948ff914dc0e43bd8c010000000000000000000000000000007dcd0a5aabf5766ff3b3217a887fcf2494000000000000000000000000000000000019eefee18f6eab028ceaf850f53158";

    // Real public inputs from your TLSN proof
    const realPublicInputs = ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x0000000000000000000000000000000000000000000000000000000000000069", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000073", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000035", "0x0000000000000000000000000000000000000000000000000000000000000034", "0x0000000000000000000000000000000000000000000000000000000000000047", "0x00000000000000000000000000000000000000000000000000000000000000bd", "0x00000000000000000000000000000000000000000000000000000000000000b2", "0x000000000000000000000000000000000000000000000000000000000000000c", "0x00000000000000000000000000000000000000000000000000000000000000da", "0x000000000000000000000000000000000000000000000000000000000000000c", "0x000000000000000000000000000000000000000000000000000000000000007d", "0x000000000000000000000000000000000000000000000000000000000000008b", "0x00000000000000000000000000000000000000000000000000000000000000bf", "0x00000000000000000000000000000000000000000000000000000000000000a1", "0x0000000000000000000000000000000000000000000000000000000000000069", "0x0000000000000000000000000000000000000000000000000000000000000015", "0x00000000000000000000000000000000000000000000000000000000000000eb", "0x00000000000000000000000000000000000000000000000000000000000000f1", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000384", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x000000000000000000000000000000000000000000000000000000000000006c", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x0000000000000000000000000000000000000000000000000000000000000073", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000054", "0x0000000000000000000000000000000000000000000000000000000000000069", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000031", "0x0000000000000000000000000000000000000000000000000000000000000037", "0x0000000000000000000000000000000000000000000000000000000000000035", "0x0000000000000000000000000000000000000000000000000000000000000035", "0x0000000000000000000000000000000000000000000000000000000000000030", "0x0000000000000000000000000000000000000000000000000000000000000037", "0x0000000000000000000000000000000000000000000000000000000000000035", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x0000000000000000000000000000000000000000000000000000000000000032", "0x0000000000000000000000000000000000000000000000000000000000000038", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x0000000000000000000000000000000000000000000000000000000000000038", "0x0000000000000000000000000000000000000000000000000000000000000017", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x000000000000000000000000000000000000000000000000000000000000006a", "0x000000000000000000000000000000000000000000000000000000000000004b", "0x0000000000000000000000000000000000000000000000000000000000000006", "0x0000000000000000000000000000000000000000000000000000000000000060", "0x000000000000000000000000000000000000000000000000000000000000008e", "0x00000000000000000000000000000000000000000000000000000000000000d1", "0x00000000000000000000000000000000000000000000000000000000000000d9", "0x00000000000000000000000000000000000000000000000000000000000000fb", "0x0000000000000000000000000000000000000000000000000000000000000090", "0x000000000000000000000000000000000000000000000000000000000000003e", "0x00000000000000000000000000000000000000000000000000000000000000ef", "0x0000000000000000000000000000000000000000000000000000000000000087", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000061", "0x00000000000000000000000000000000000000000000000000000000000003a2", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000070", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x0000000000000000000000000000000000000000000000000000000000000069", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000033", "0x000000000000000000000000000000000000000000000000000000000000002e", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x0000000000000000000000000000000000000000000000000000000000000032", "0x0000000000000000000000000000000000000000000000000000000000000035", "0x0000000000000000000000000000000000000000000000000000000000000039", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x0000000000000000000000000000000000000000000000000000000000000036", "0x0000000000000000000000000000000000000000000000000000000000000037", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000098", "0x000000000000000000000000000000000000000000000000000000000000007d", "0x000000000000000000000000000000000000000000000000000000000000009a", "0x0000000000000000000000000000000000000000000000000000000000000070", "0x00000000000000000000000000000000000000000000000000000000000000a5", "0x00000000000000000000000000000000000000000000000000000000000000af", "0x00000000000000000000000000000000000000000000000000000000000000c8", "0x00000000000000000000000000000000000000000000000000000000000000d2", "0x00000000000000000000000000000000000000000000000000000000000000c7", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x000000000000000000000000000000000000000000000000000000000000002a", "0x00000000000000000000000000000000000000000000000000000000000000a4", "0x0000000000000000000000000000000000000000000000000000000000000097", "0x000000000000000000000000000000000000000000000000000000000000002c", "0x0000000000000000000000000000000000000000000000000000000000000080", "0x0000000000000000000000000000000000000000000000000000000000000070", "0x000000000000000000000000000000000000000000000000000000000000038d", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000073", "0x0000000000000000000000000000000000000000000000000000000000000079", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x0000000000000000000000000000000000000000000000000000000000000062", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x000000000000000000000000000000000000000000000000000000000000006c", "0x000000000000000000000000000000000000000000000000000000000000003d", "0x0000000000000000000000000000000000000000000000000000000000000055", "0x0000000000000000000000000000000000000000000000000000000000000053", "0x0000000000000000000000000000000000000000000000000000000000000044", "0x0000000000000000000000000000000000000000000000000000000000000054", "0x0000000000000000000000000000000000000000000000000000000000000050", "0x000000000000000000000000000000000000000000000000000000000000004c", "0x000000000000000000000000000000000000000000000000000000000000004e", "0x0000000000000000000000000000000000000000000000000000000000000062", "0x0000000000000000000000000000000000000000000000000000000000000084", "0x00000000000000000000000000000000000000000000000000000000000000b7", "0x000000000000000000000000000000000000000000000000000000000000004c", "0x0000000000000000000000000000000000000000000000000000000000000034", "0x000000000000000000000000000000000000000000000000000000000000001c", "0x00000000000000000000000000000000000000000000000000000000000000ba", "0x00000000000000000000000000000000000000000000000000000000000000f1", "0x000000000000000000000000000000000000000000000000000000000000009c", "0x00000000000000000000000000000000000000000000000000000000000000ca", "0x0000000000000000000000000000000000000000000000000000000000000035", "0x00000000000000000000000000000000000000000000000000000000000000c7", "0x0000000000000000000000000000000000000000000000000000000000000037", "0x000000000000000000000000000000000000000000000000000000000000005a", "0x0000000000000000000000000000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000000000000000000000000000096", "0x000000000000000000000000000000000000000000000000000000000000002c"];

    try {
        console.log("Public inputs array length:", realPublicInputs.length);
        
        // Test the corrected extraction function
        console.log("Testing raw data extraction...");
        const rawResult = await privacyPool.testExtractPriceDataNoVerify(realPublicInputs);
        
        console.log("\n=== Raw Extracted Data ===");
        console.log("Price:", rawResult.price);
        console.log("Symbol:", rawResult.symbol);
        console.log("Mins:", rawResult.mins.toString());
        console.log("Close Time:", rawResult.closeTime.toString());
        
        // Test clean data extraction
        console.log("\nTesting clean data extraction...");
        const cleanResult = await privacyPool.testExtractCleanPriceData(realPublicInputs);
        
        console.log("\n=== Clean Extracted Data ===");
        console.log("Clean Price (uint256 with 8 decimals):", cleanResult.cleanPrice.toString());
        console.log("Clean Price (as decimal):", Number(cleanResult.cleanPrice) / 100000000);
        console.log("Clean Symbol:", cleanResult.cleanSymbol);
        console.log("Mins:", cleanResult.mins.toString());
        console.log("Close Time:", cleanResult.closeTime.toString());
        
        // Verify the extracted values
        console.log("\n=== Verification ===");
        console.log("Expected price: 3.62596667");
        console.log("Extracted price:", Number(cleanResult.cleanPrice) / 100000000);
        console.log("Match:", Number(cleanResult.cleanPrice) / 100000000 === 3.62596667);
        
        console.log("Expected symbol: USDTPLN");
        console.log("Extracted symbol:", cleanResult.cleanSymbol);
        console.log("Match:", cleanResult.cleanSymbol === "USDTPLN");

        // Test currency conversion
        console.log("\n=== Currency Conversion Test ===");
        const plnAmount = 5000; // 50.00 PLN (2 decimal places)
        const conversionResult = await privacyPool.calculateUsdcForPlnTransfer(
            realPublicInputs, 
            plnAmount, 
            500 // 5% tolerance
        );
        
        console.log("PLN transferred:", plnAmount / 100, "PLN");
        console.log("Exchange rate used:", Number(conversionResult.usedRate) / 100000000);
        console.log("USDC to send:", Number(conversionResult.usdcToSend) / 1000000, "USDC"); // USDC has 6 decimals
        console.log("Rate valid:", conversionResult.rateValid);
        
        // Manual calculation check
        const manualCalc = 50 / 3.62596667;
        console.log("Manual calculation:", manualCalc.toFixed(6), "USDC");
        console.log("Contract calculation:", Number(conversionResult.usdcToSend) / 1000000, "USDC");
        
        // Show raw values for verification
        console.log("\nRaw values:");
        console.log("USDC amount (raw):", conversionResult.usdcToSend.toString(), "(6 decimals)");
        console.log("Rate (raw):", conversionResult.usedRate.toString(), "(8 decimals)");

        // Test universal calculation functions
        console.log("\n=== Universal Calculation Tests ===");
        
        const testRate = 362596667; // 3.62596667 USDCPLN
        
        // Test PLN -> USDC
        const usdcForPln = await privacyPool.calculateUSDCForPLN(10000, testRate); // 100 PLN
        console.log("100 PLN ->", Number(usdcForPln) / 1000000, "USDC");
        
        // Test PLN -> ETH (mock rate: 15000 PLN per ETH = 1500000000000)
        const ethRate = 1500000000000; // 15000.00000000 ETHPLN
        const ethForPln = await privacyPool.calculateETHForPLN(10000, ethRate); // 100 PLN
        console.log("100 PLN ->", Number(ethForPln) / 1e18, "ETH (at 15000 PLN/ETH)");
        
        // Test USD -> USDC (should be ~1:1)
        const usdRate = 100000000; // 1.00000000 USDCUSD
        const usdcForUsd = await privacyPool.calculateUSDCForUSD(10000, usdRate); // 100 USD
        console.log("100 USD ->", Number(usdcForUsd) / 1000000, "USDC (1:1 rate)");

        // Test universal function directly
        console.log("\n=== Universal Function Test ===");
        const universalResult = await privacyPool.calculateCryptoForFiatDeposit(
            5000,        // 50.00 PLN
            2,           // PLN decimals
            testRate,    // Exchange rate
            6            // USDC decimals
        );
        console.log("Universal function: 50 PLN ->", Number(universalResult) / 1000000, "USDC");

        // Test mock transaction flow
        console.log("\n=== Mock Transaction Flow ===");
        
        const mockUsdcAddress = "0x0000000000000000000000000000000000000001"; // Dummy address
        
        // Scenario 1: User transferred 75 PLN, wants USDC
        const mockFlow1 = await privacyPool.mockTransactionFlow(
            realPublicInputs,
            7500,           // 75.00 PLN
            mockUsdcAddress,
            6               // USDC decimals
        );
        
        console.log("Scenario 1 (75 PLN -> USDC):");
        console.log("  Rate:", Number(mockFlow1.exchangeRate) / 100000000);
        console.log("  Pair:", mockFlow1.tradingPair);
        console.log("  USDC to send:", Number(mockFlow1.cryptoAmountToSend) / 1000000);
        console.log("  Summary:", mockFlow1.summary);
        
        // Scenario 2: User transferred 200 PLN, wants ETH
        const mockFlow2 = await privacyPool.mockTransactionFlow(
            realPublicInputs,
            20000,          // 200.00 PLN
            mockUsdcAddress, // Using same address for simplicity
            18              // ETH decimals
        );
        
        console.log("\nScenario 2 (200 PLN -> ETH):");
        console.log("  Rate:", Number(mockFlow2.exchangeRate) / 100000000);
        console.log("  ETH to send (wei):", mockFlow2.cryptoAmountToSend.toString());
        console.log("  ETH to send:", Number(mockFlow2.cryptoAmountToSend) / 1e18);
        console.log("  Summary:", mockFlow2.summary);

    } catch (error) {
        console.error("Test failed:", error.message);
    }
}

main()
    .then(() => {
        console.log("\nPrice verification test completed");
        setTimeout(() => process.exit(0), 100);
    })
    .catch((error) => {
        console.error(error);
        setTimeout(() => process.exit(1), 100);
    });