const hre = require("hardhat");

const PP_ADDRESS = "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707";

async function main() {
    const privacyPool = await hre.ethers.getContractAt("PrivacyPool", PP_ADDRESS);
    
    // Test data based on your examples:
    // "amount":-2 (amountLength=1, should extract "2")
    // "username":"neotheprog" (revTagLength=23, should extract "neotheprog")
    
    // Create mock publicInputs array
    const publicInputs = ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000075", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000079", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000050", "0x000000000000000000000000000000000000000000000000000000000000004c", "0x000000000000000000000000000000000000000000000000000000000000004e", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x00000000000000000000000000000000000000000000000000000000000000b3", "0x0000000000000000000000000000000000000000000000000000000000000040", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000037", "0x000000000000000000000000000000000000000000000000000000000000009d", "0x00000000000000000000000000000000000000000000000000000000000000fb", "0x00000000000000000000000000000000000000000000000000000000000000fc", "0x000000000000000000000000000000000000000000000000000000000000004b", "0x0000000000000000000000000000000000000000000000000000000000000098", "0x0000000000000000000000000000000000000000000000000000000000000015", "0x00000000000000000000000000000000000000000000000000000000000000a0", "0x00000000000000000000000000000000000000000000000000000000000000c7", "0x00000000000000000000000000000000000000000000000000000000000000c8", "0x00000000000000000000000000000000000000000000000000000000000000fe", "0x0000000000000000000000000000000000000000000000000000000000000025", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000193", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000034", "0x0000000000000000000000000000000000000000000000000000000000000053", "0x0000000000000000000000000000000000000000000000000000000000000051", "0x000000000000000000000000000000000000000000000000000000000000004a", "0x0000000000000000000000000000000000000000000000000000000000000044", "0x0000000000000000000000000000000000000000000000000000000000000032", "0x0000000000000000000000000000000000000000000000000000000000000066", "0x0000000000000000000000000000000000000000000000000000000000000061", "0x0000000000000000000000000000000000000000000000000000000000000069", "0x0000000000000000000000000000000000000000000000000000000000000048", "0x0000000000000000000000000000000000000000000000000000000000000059", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x00000000000000000000000000000000000000000000000000000000000000fe", "0x0000000000000000000000000000000000000000000000000000000000000081", "0x000000000000000000000000000000000000000000000000000000000000007a", "0x000000000000000000000000000000000000000000000000000000000000001c", "0x0000000000000000000000000000000000000000000000000000000000000006", "0x00000000000000000000000000000000000000000000000000000000000000b7", "0x00000000000000000000000000000000000000000000000000000000000000c9", "0x00000000000000000000000000000000000000000000000000000000000000db", "0x00000000000000000000000000000000000000000000000000000000000000bc", "0x0000000000000000000000000000000000000000000000000000000000000046", "0x00000000000000000000000000000000000000000000000000000000000000d6", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x00000000000000000000000000000000000000000000000000000000000000ec", "0x00000000000000000000000000000000000000000000000000000000000000ef", "0x0000000000000000000000000000000000000000000000000000000000000052", "0x00000000000000000000000000000000000000000000000000000000000000b3", "0x0000000000000000000000000000000000000000000000000000000000000141", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000061", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x0000000000000000000000000000000000000000000000000000000000000075", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x000000000000000000000000000000000000000000000000000000000000002d", "0x0000000000000000000000000000000000000000000000000000000000000032", "0x00000000000000000000000000000000000000000000000000000000000000d4", "0x00000000000000000000000000000000000000000000000000000000000000b7", "0x00000000000000000000000000000000000000000000000000000000000000dd", "0x00000000000000000000000000000000000000000000000000000000000000eb", "0x0000000000000000000000000000000000000000000000000000000000000091", "0x0000000000000000000000000000000000000000000000000000000000000015", "0x000000000000000000000000000000000000000000000000000000000000003d", "0x000000000000000000000000000000000000000000000000000000000000000d", "0x0000000000000000000000000000000000000000000000000000000000000025", "0x00000000000000000000000000000000000000000000000000000000000000a9", "0x00000000000000000000000000000000000000000000000000000000000000c6", "0x00000000000000000000000000000000000000000000000000000000000000b6", "0x000000000000000000000000000000000000000000000000000000000000007b", "0x00000000000000000000000000000000000000000000000000000000000000a7", "0x0000000000000000000000000000000000000000000000000000000000000034", "0x00000000000000000000000000000000000000000000000000000000000000ea", "0x00000000000000000000000000000000000000000000000000000000000000e5", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000075", "0x0000000000000000000000000000000000000000000000000000000000000073", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000061", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000068", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000070", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x0000000000000000000000000000000000000000000000000000000000000067", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000004a", "0x0000000000000000000000000000000000000000000000000000000000000062", "0x000000000000000000000000000000000000000000000000000000000000006a", "0x0000000000000000000000000000000000000000000000000000000000000064", "0x00000000000000000000000000000000000000000000000000000000000000ad", "0x000000000000000000000000000000000000000000000000000000000000002f", "0x00000000000000000000000000000000000000000000000000000000000000dc", "0x0000000000000000000000000000000000000000000000000000000000000028", "0x000000000000000000000000000000000000000000000000000000000000004f", "0x00000000000000000000000000000000000000000000000000000000000000bb", "0x0000000000000000000000000000000000000000000000000000000000000038", "0x00000000000000000000000000000000000000000000000000000000000000e9", "0x0000000000000000000000000000000000000000000000000000000000000067", "0x00000000000000000000000000000000000000000000000000000000000000e2", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000040", "0x00000000000000000000000000000000000000000000000000000000000003b6"];
    
    // Test 1: Extract amount from "amount":-2
    console.log("=== Test 1: Extract Fiat Amount ===");
    
    // Fill amount data at index 76: "amount":-2
    const amountString = '"amount":-2';
    console.log("Original amount string:", amountString);
    console.log("Amount string length:", amountString.length);
    
    // Convert to bytes and fill publicInputs starting at index 76
    for (let i = 0; i < amountString.length; i++) {
        const byteValue = amountString.charCodeAt(i);
        const bytes32Value = '0x' + byteValue.toString(16).padStart(64, '0');
        publicInputs[76 + i] = bytes32Value;
    }
    
    // Display what we're putting in
    console.log("\\nBytes in publicInputs (indices 76-87):");
    for (let i = 76; i < 88; i++) {
        const byte = parseInt(publicInputs[i], 16);
        const char = String.fromCharCode(byte);
        console.log(`Index ${i}: ${publicInputs[i]} -> ${byte} -> '${char}'`);
    }
    
    try {
        const amountLength = 1; // Length of "2"
        const extractedAmount = await privacyPool._extractFiatAmount(publicInputs, amountLength);
        console.log("\\n=== AMOUNT RESULTS ===");
        console.log("Expected amount: 2");
        console.log("Extracted amount:", extractedAmount.toString());
        console.log("Match:", extractedAmount.toString() === "2" ? "✅" : "❌");
    } catch (error) {
        console.error("Error extracting amount:", error.message);
    }
    
    // Test 2: Extract revTag from "username":"neotheprog"  
    console.log("\\n=== Test 2: Extract RevTag ===");
    
    const usernameString = '"username":"neotheprog"';
    console.log("Original username string:", usernameString);
    console.log("Username string length:", usernameString.length);
    
    // Clear previous data and fill username data at index 105
    
    for (let i = 0; i < usernameString.length; i++) {
        const byteValue = usernameString.charCodeAt(i);
        const bytes32Value = '0x' + byteValue.toString(16).padStart(64, '0');
        publicInputs[105 + i] = bytes32Value;
    }
    
    // Display what we're putting in
    console.log("\\nBytes in publicInputs (indices 105-127):");
    for (let i = 105; i < 128; i++) {
        if (i < 105 + usernameString.length) {
            const byte = parseInt(publicInputs[i], 16);
            const char = String.fromCharCode(byte);
            console.log(`Index ${i}: ${publicInputs[i]} -> ${byte} -> '${char}'`);
        }
    }
    
    try {
        const revTagLength = 23; // Total length including JSON formatting
        const extractedRevTag = await privacyPool._extractRevTag(publicInputs, revTagLength);
        console.log("\\n=== REVTAG RESULTS ===");
        console.log("Expected revTag: neotheprog");
        console.log("Extracted revTag:", extractedRevTag);
        console.log("Match:", extractedRevTag === "neotheprog" ? "✅" : "❌");
    } catch (error) {
        console.error("Error extracting revTag:", error.message);
    }
    
    // Test 3: Test edge cases
    console.log("\\n=== Test 3: Edge Cases ===");
    
    // Test different amount lengths
    const testAmounts = [
        { value: '"amount":-5', amountLength: 1, expected: "5" },
        { value: '"amount":-15', amountLength: 2, expected: "15" },
        { value: '"amount":-123', amountLength: 3, expected: "123" }
    ];
    
    for (const testCase of testAmounts) {
        console.log(`\\nTesting amount: ${testCase.value}`);
        
        // Clear and fill data
        publicInputs.fill('0x0000000000000000000000000000000000000000000000000000000000000000');
        
        for (let i = 0; i < testCase.value.length; i++) {
            const byteValue = testCase.value.charCodeAt(i);
            const bytes32Value = '0x' + byteValue.toString(16).padStart(64, '0');
            publicInputs[76 + i] = bytes32Value;
        }
        
        try {
            const result = await privacyPool._extractFiatAmount(publicInputs, testCase.amountLength);
            console.log(`Expected: ${testCase.expected}, Got: ${result.toString()}, Match: ${result.toString() === testCase.expected ? "✅" : "❌"}`);
        } catch (error) {
            console.error(`Error: ${error.message}`);
        }
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });