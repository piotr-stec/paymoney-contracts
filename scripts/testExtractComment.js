const hre = require("hardhat");

const PP_ADDRESS = "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707";


async function main() {
    // Deploy the contract

    const privacyPool = await hre.ethers.getContractAt("PrivacyPool", PP_ADDRESS);
    // // Mock addresses for constructor
    // const mockOwner = "0x1234567890123456789012345678901234567890";
    // const mockVerifier = "0x1234567890123456789012345678901234567891";
    // const mockTlsnBinanceVerifier = "0x1234567890123456789012345678901234567892";

    // const privacyPool = await PrivacyPool.deploy(
    //     mockOwner,
    //     mockVerifier,
    //     mockTlsnBinanceVerifier
    // );

    // await privacyPool.waitForDeployment();
    // console.log("PrivacyPool deployed to:", await privacyPool.getAddress());

    // // Create test data: "comment:abc123def456789" (23 bytes)
    // const testComment = "comment:abc123def456789";
    // console.log("Original comment:", testComment);
    // console.log("Comment length:", testComment.length);

    // // Convert string to bytes and then to bytes32 array
    // const commentBytes = Buffer.from(testComment, 'utf8');
    // console.log("Comment as bytes:", commentBytes);

    // Create publicInputs array with comment starting at index 35
    const publicInputs = ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000075", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000079", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000050", "0x000000000000000000000000000000000000000000000000000000000000004c", "0x000000000000000000000000000000000000000000000000000000000000004e", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x00000000000000000000000000000000000000000000000000000000000000b3", "0x0000000000000000000000000000000000000000000000000000000000000040", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000037", "0x000000000000000000000000000000000000000000000000000000000000009d", "0x00000000000000000000000000000000000000000000000000000000000000fb", "0x00000000000000000000000000000000000000000000000000000000000000fc", "0x000000000000000000000000000000000000000000000000000000000000004b", "0x0000000000000000000000000000000000000000000000000000000000000098", "0x0000000000000000000000000000000000000000000000000000000000000015", "0x00000000000000000000000000000000000000000000000000000000000000a0", "0x00000000000000000000000000000000000000000000000000000000000000c7", "0x00000000000000000000000000000000000000000000000000000000000000c8", "0x00000000000000000000000000000000000000000000000000000000000000fe", "0x0000000000000000000000000000000000000000000000000000000000000025", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000193", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000034", "0x0000000000000000000000000000000000000000000000000000000000000053", "0x0000000000000000000000000000000000000000000000000000000000000051", "0x000000000000000000000000000000000000000000000000000000000000004a", "0x0000000000000000000000000000000000000000000000000000000000000044", "0x0000000000000000000000000000000000000000000000000000000000000032", "0x0000000000000000000000000000000000000000000000000000000000000066", "0x0000000000000000000000000000000000000000000000000000000000000061", "0x0000000000000000000000000000000000000000000000000000000000000069", "0x0000000000000000000000000000000000000000000000000000000000000048", "0x0000000000000000000000000000000000000000000000000000000000000059", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x00000000000000000000000000000000000000000000000000000000000000fe", "0x0000000000000000000000000000000000000000000000000000000000000081", "0x000000000000000000000000000000000000000000000000000000000000007a", "0x000000000000000000000000000000000000000000000000000000000000001c", "0x0000000000000000000000000000000000000000000000000000000000000006", "0x00000000000000000000000000000000000000000000000000000000000000b7", "0x00000000000000000000000000000000000000000000000000000000000000c9", "0x00000000000000000000000000000000000000000000000000000000000000db", "0x00000000000000000000000000000000000000000000000000000000000000bc", "0x0000000000000000000000000000000000000000000000000000000000000046", "0x00000000000000000000000000000000000000000000000000000000000000d6", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x00000000000000000000000000000000000000000000000000000000000000ec", "0x00000000000000000000000000000000000000000000000000000000000000ef", "0x0000000000000000000000000000000000000000000000000000000000000052", "0x00000000000000000000000000000000000000000000000000000000000000b3", "0x0000000000000000000000000000000000000000000000000000000000000141", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000061", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x0000000000000000000000000000000000000000000000000000000000000075", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x000000000000000000000000000000000000000000000000000000000000002d", "0x0000000000000000000000000000000000000000000000000000000000000032", "0x00000000000000000000000000000000000000000000000000000000000000d4", "0x00000000000000000000000000000000000000000000000000000000000000b7", "0x00000000000000000000000000000000000000000000000000000000000000dd", "0x00000000000000000000000000000000000000000000000000000000000000eb", "0x0000000000000000000000000000000000000000000000000000000000000091", "0x0000000000000000000000000000000000000000000000000000000000000015", "0x000000000000000000000000000000000000000000000000000000000000003d", "0x000000000000000000000000000000000000000000000000000000000000000d", "0x0000000000000000000000000000000000000000000000000000000000000025", "0x00000000000000000000000000000000000000000000000000000000000000a9", "0x00000000000000000000000000000000000000000000000000000000000000c6", "0x00000000000000000000000000000000000000000000000000000000000000b6", "0x000000000000000000000000000000000000000000000000000000000000007b", "0x00000000000000000000000000000000000000000000000000000000000000a7", "0x0000000000000000000000000000000000000000000000000000000000000034", "0x00000000000000000000000000000000000000000000000000000000000000ea", "0x00000000000000000000000000000000000000000000000000000000000000e5", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x0000000000000000000000000000000000000000000000000000000000000075", "0x0000000000000000000000000000000000000000000000000000000000000073", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000061", "0x000000000000000000000000000000000000000000000000000000000000006d", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x0000000000000000000000000000000000000000000000000000000000000074", "0x0000000000000000000000000000000000000000000000000000000000000068", "0x0000000000000000000000000000000000000000000000000000000000000065", "0x0000000000000000000000000000000000000000000000000000000000000070", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x0000000000000000000000000000000000000000000000000000000000000067", "0x0000000000000000000000000000000000000000000000000000000000000022", "0x000000000000000000000000000000000000000000000000000000000000004a", "0x0000000000000000000000000000000000000000000000000000000000000062", "0x000000000000000000000000000000000000000000000000000000000000006a", "0x0000000000000000000000000000000000000000000000000000000000000064", "0x00000000000000000000000000000000000000000000000000000000000000ad", "0x000000000000000000000000000000000000000000000000000000000000002f", "0x00000000000000000000000000000000000000000000000000000000000000dc", "0x0000000000000000000000000000000000000000000000000000000000000028", "0x000000000000000000000000000000000000000000000000000000000000004f", "0x00000000000000000000000000000000000000000000000000000000000000bb", "0x0000000000000000000000000000000000000000000000000000000000000038", "0x00000000000000000000000000000000000000000000000000000000000000e9", "0x0000000000000000000000000000000000000000000000000000000000000067", "0x00000000000000000000000000000000000000000000000000000000000000e2", "0x0000000000000000000000000000000000000000000000000000000000000063", "0x0000000000000000000000000000000000000000000000000000000000000040", "0x00000000000000000000000000000000000000000000000000000000000003b6"];

    // // Fill comment data starting at index 35
    // for (let i = 0; i < commentBytes.length; i++) {
    //     const byteValue = commentBytes[i];
    //     const bytes32Value = '0x' + byteValue.toString(16).padStart(64, '0');
    //     publicInputs[35 + i] = bytes32Value;
    // }

    // console.log("\nPublic inputs array length:", publicInputs.length);
    // console.log("Comment bytes in publicInputs (indices 35-57):");
    // for (let i = 35; i < 58; i++) {
    //     const byte = parseInt(publicInputs[i], 16);
    //     const char = String.fromCharCode(byte);
    //     console.log(`Index ${i}: ${publicInputs[i]} -> ${byte} -> '${char}'`);
    // }

    try {
        // Call the function
        const extractedComment = await privacyPool._extractCommentFromPublicInputs(publicInputs);

        console.log("\n=== RESULTS ===");
        console.log("Extracted comment:", extractedComment);

        // Test edge cases
        // console.log("\n=== EDGE CASE TESTS ===");

        // // Test with insufficient inputs
        // try {
        //     await privacyPool._extractCommentFromPublicInputs(publicInputs.slice(0, 50));
        //     console.log("❌ Should have failed with insufficient inputs");
        // } catch (error) {
        //     console.log("✅ Correctly failed with insufficient inputs:", error.message.includes("Insufficient public inputs"));
        // }

        // Test with exactly 58 elements
        // const minInputs = publicInputs.slice(0, 58);
        // const extractedMin = await privacyPool._extractCommentFromPublicInputs(minInputs);
        // console.log("✅ Works with exactly 58 inputs:", extractedMin === testComment);

    } catch (error) {
        console.error("Error calling function:", error.message);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });